菜单与功能模块的结合问题：

用例：手工考勤
1.基本事件流
    教师选择手工考勤时，本用例开始执行。
    1）系统请求教师输入，手工考勤的4种手工记录。
    2）教师输入4种记录的人员名单。
    3）系统在seq表种留下考勤记录。
    4）系统按照手工考勤的名单在detail表留下详细记录。
2.可选时间流
    1）输入人员不存在
    在主事件流中，若教师输入的名单在考勤名单中不存在，提示错误，用例结束。
    2）选择的班级正在考勤队列中
    在主事件流中，若想要考勤的对象正在考勤队列中，系统提示错误，用例结束。

用例：手工修改
1.基本事件流
    当教师选择手工修改时，本用例开始执行。
    1）系统请求教师输入 教师id，课程id，seqid，和将修改的学生姓名，和考勤结果。
    2）教师输入所需内容，系统在对应的detail表中，增加一条手工记录。
    3）根据detail表更新sum表。
2.可选事件流
    1）教师修输入的姓名，考勤结果不存在。
    在主事件流中，若教师输入的姓名，考勤结果不存在，系统提示错误，用例结束。
    2）教师选择的detail表不存在。
    在主事件流中，若教师选择的detail表不存在，即在seq表中没有相关记录，系统提示错误，用例结束。

用例：审批假条
1.基本事件流
    当教师选择审批假条功能时，本用例开始执行。
    1）系统请求教师输入 教师id，课程id，seqid，和将修改的学生姓名，和考勤结果。
    2）教师输入所需内容，系统在对应的detail表中，查找请假状态的学生，并打印。
    3）系统请求教师输入审批通过的学生名单。
    4）系统依据审批通过的学生名单，在detail表中留下审批通过的手工记录。
    5）根据detail表更sum表。
2.可选事件流
    1）教师修输入的姓名，考勤结果不存在。
    在主事件流中，若教师输入的姓名，考勤结果不存在，系统提示错误，用例结束。
    2）教师选择的detail表不存在。
    在主事件流中，若教师选择的detail表不存在，即在seq表中没有相关记录，系统提示错误，用例结束。
    3）考勤对象在考勤队列中
    在主事件流中，若考勤对象在考勤队列中，系统提示错误，用例结束。
3.前提条件
    对驾驶输入的检查，与错误提示，应在菜单模块进行。

用例：查询考勤记录
1.基本事件流
    当教师选择查询考勤汇总时本用例开始执行。
    1）系统请求教师选择查询方式
    2）教师选择查询方式，提供打印相应的结果。

用例：期末汇总
1.基本事件流
    当教师选择期末汇总时，本用例开始执行。
    1）系统请求教师选择sum表。
    2）教师选择后，体统将sum表中每位学生的汇总结果打印出来
2.可选事件流
    1）教师选择的sum表不存在
    在主事件流中，教师选择的sum表不存在，系统提示错误，用例结束。

用例：在seq表中增加一条记录
1.基本事件流
    当需要在seq表中增加一条考勤记录时，本用例开始执行。
    1）系统请求教师输入 tecid，courseid。
    2）教师输入。
    3）系统根据 tecid，courseid 计算处本条记录的seqid，从系统获取当前时间。
    4）系统根据以上条件构造考勤记录。
    5）系统将新构造的记录保存致seq表。

用例：将构造的考勤详细记录写入文件
1.基本事件流
    当考勤详细记录构造完成后，需要保存为文件时，本用例开始执行。
    1）体统根据 tecid, courseid, seqid,构造新的文件名。
    2）将构造完成的详细记录，保存至性的文件名中。

用例：输入的有效性检查
1.基本时间流
    当教师输入学生id，考勤次序号后，需要检查教师的输入是否有效时，本用例开始执行。
    1）检查学生id的有效性能，需要教师输入 tecid, courseid, stuid, course_filename, stu_filename.
    2）教师输入后，系统通过 tecid, courseid, course_filename, stu_filename 获得所需学生名单，对比输入的stuid，
    若stuid在名单中，有效，否则，无效。
    1）检查seqid的有效性，需要教师输入 tecid, courseid，seqid， seq_filename.
    2）教师输入后，系统通过 tecid, courseid，seq_filename，获取seqid的有效范围，依此判断seqid是否有效。

3.前提条件
    tecid, courseid, course_filename, stu_filename，已验证有效.

4.后置条件
    检查模块可以重构出来。

用例:detail表转sum表的算法
已有，注意使用时机。
暂定，在所有新建，与修改detail表后调用该算法。
1.基本事件流
    当需要查询sum时（要将detail表中的数据汇总为sum）时，本用例开始执行。
    1）系统请求用户输入 tecid， courseid， seqid ，用户输入
    2）系统计算需要汇总的detail表的文件名。
    3）依此对各detail文件的数据按算法进行抽取，获得参与考勤的学生的考勤结果。
    4）将此次的考勤结果放入sum表内的对应次序内。
    5）保存sum表
2.可选事件流
    1）用户选择的detail表在seq表内不存在记录
    在主事件流中，若用户输入的元素对应的detail表不存在与考勤记录中，系统提示错误，用例结束。

CheckinResult,ProofPath,IsSucc,CheckinTime,StuID,CheckinType
detail表中的每行CheckinResult判定方法：
1.if "CheckinType" == "man"
 CheckinResult = CheckinResult  # 因为手工结果是绝对的，不需要判断。
 2.if "CheckinType" == "auto"
 if "IsSucc" == "False"
 CheckinResult = "null"
 if "IsSucc" == "True"
 if "CheckinTime" - "tecstarttime" < 5 min
 CheckinResult = "迟到"
 else
 CheckinResult = "到勤"
 3.if "CheckinType" == "sample"
 if "IsSucc" == "False"
 CheckinResult = "null"
 if "IsSucc" == "True"
 CheckinResult = "到勤"
detail表中某人的最终CheckinResult判定方法：
if CheckinResult
CheckinResult_end = CheckinResult_now

用例：功能同步与互斥判断
待定！！！